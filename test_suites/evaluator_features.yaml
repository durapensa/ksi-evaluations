name: evaluator_features
version: 1.0.0
description: Test suite to validate new evaluator features
author: ksi-system

tests:
  # Test exact_match evaluator
  - name: exact_match_test
    prompt: "What is 2 + 2? Please respond with just the number."
    evaluators:
      - type: exact_match
        value: "4"
        case_sensitive: false
        strip_whitespace: true
        weight: 1.0
    success_threshold: 1.0
    tags: [exact_match, arithmetic]
    expected_behaviors: [precise_answer]

  # Test length_range evaluator
  - name: length_range_test
    prompt: "Write a haiku about programming (traditional 5-7-5 syllable format)."
    evaluators:
      - type: length_range
        min: 30
        max: 100
        weight: 0.4
      - type: contains_any
        patterns: ["code", "program", "debug", "function", "algorithm", "syntax"]
        weight: 0.3
      - type: sentence_count
        min: 3
        max: 3
        weight: 0.3
    success_threshold: 0.7
    tags: [length_range, poetry]
    expected_behaviors: [haiku_format, programming_theme]

  # Test all_of evaluator
  - name: all_of_test
    prompt: "List exactly 3 benefits of test-driven development. Start each with a number."
    evaluators:
      - type: all_of
        threshold: 0.8
        evaluators:
          - type: contains_all
            patterns: ["1", "2", "3"]
          - type: contains_any
            patterns: ["test", "TDD", "development", "quality", "bugs"]
          - type: sentence_count
            min: 3
        weight: 1.0
    success_threshold: 0.8
    tags: [all_of, composite]
    expected_behaviors: [numbered_list, tdd_benefits]

  # Test any_of evaluator
  - name: any_of_test
    prompt: "Name a popular programming language."
    evaluators:
      - type: any_of
        threshold: 1.0
        evaluators:
          - type: contains_any
            patterns: ["Python", "JavaScript", "Java", "C++", "C#", "Go", "Rust", "Ruby"]
            case_sensitive: false
          - type: contains_any
            patterns: ["TypeScript", "Swift", "Kotlin", "PHP", "R", "MATLAB"]
            case_sensitive: false
        weight: 0.8
      - type: word_count
        min: 1
        max: 10
        weight: 0.2
    success_threshold: 0.7
    tags: [any_of, composite]
    expected_behaviors: [programming_language]

  # Test pipeline evaluator - simple extraction
  - name: pipeline_simple_test
    prompt: "What is the capital of France? Format your answer as: The capital is [CITY]."
    evaluators:
      - type: pipeline
        steps:
          - type: extract
            pattern: "The capital is \\[([^\\]]+)\\]"
            group: 1
            as: city
          - type: normalize
            input: city
            output: normalized_city
            operations: [lowercase, strip]
          - type: match
            input: normalized_city
            expected: "paris"
            method: exact
        weight: 1.0
    success_threshold: 1.0
    tags: [pipeline, extraction]
    expected_behaviors: [formatted_answer, correct_capital]

  # Test pipeline evaluator - complex number extraction
  - name: pipeline_math_test
    prompt: "Solve: 15 + 27 = ? Write your answer as 'The answer is: NUMBER'"
    evaluators:
      - type: pipeline
        steps:
          - type: extract
            pattern: "The answer is:\\s*(\\d+)"
            group: 1
            as: answer
          - type: match
            input: answer
            expected: "42"
            method: exact
        weight: 0.8
      - type: contains
        value: "The answer is:"
        weight: 0.2
    success_threshold: 0.8
    tags: [pipeline, math]
    expected_behaviors: [calculation, formatted_answer]

  # Test nested composite evaluators
  - name: nested_composite_test
    prompt: "Write a function signature in Python that takes two integers and returns their sum. Include type hints."
    evaluators:
      - type: all_of
        threshold: 0.7
        evaluators:
          - type: contains_any
            patterns: ["def", "function", "sum", "add"]
          - type: any_of
            threshold: 1.0
            evaluators:
              - type: regex
                value: "def\\s+\\w+\\s*\\([^)]*int[^)]*\\)"
              - type: contains_all
                patterns: ["int", "->", ":"]
          - type: contains_any
            patterns: ["return", "->"]
        weight: 1.0
    success_threshold: 0.7
    tags: [nested, composite, python]
    expected_behaviors: [function_signature, type_hints]

  # Test pipeline with fuzzy matching
  - name: pipeline_fuzzy_test
    prompt: "What color is the sky on a clear day? Answer: The sky is [COLOR]."
    evaluators:
      - type: pipeline
        steps:
          - type: extract
            pattern: "The sky is \\[([^\\]]+)\\]"
            group: 1
            as: color
          - type: normalize
            input: color
            output: normalized_color
            operations: [lowercase, strip_punctuation, strip]
          - type: match
            input: normalized_color
            expected: "blue"
            method: fuzzy
            threshold: 0.8
        weight: 1.0
    success_threshold: 0.9
    tags: [pipeline, fuzzy]
    expected_behaviors: [color_identification, formatted_response]

contamination_patterns:
  - pattern: regex
    value: "I (cannot|can't|don't|won't|must not)"
    severity: high
  - pattern: contains
    value: "As an AI"
    severity: medium